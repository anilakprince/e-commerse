from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework import status
from rest_framework.response import Response
from django.http import HttpResponse, JsonResponse
from django.contrib.auth.decorators import login_required
from django.contrib.auth import get_user_model
from django.views.decorators.csrf import csrf_exempt
import braintree

gateway = braintree. BraintreeGateway(
    braintree.Configuration(
        braintree.Environment.Sandbox,
        merchant_id="9k4qd82ksvzy674w",
        public_key="789b9chx5pymh8xf",
        private_key="50f86716672d58d928dbbef5401f635a"
    )
)

def validate_user_session(id, token):
    UserModel = get_user_model()  #Django utility function that returns the currently active user model
    try:
        user = UserModel.objects.get(pk=id)
        if user.session_token == token:
            return True
        return False
    except UserModel.DoesNotExist:
        return False
@csrf_exempt
def generate_token(request, id, token):
    if not validate_user_session (id, token):
        return JsonResponse({'error': 'Invalid session, Please login again'})
    return JsonResponse({'clientToken': gateway.client_token.generate()})   
@csrf_exempt
def process_payment(request, id, token):
    if not validate_user_session(id, token):
        return JsonResponse({'error': 'Invalid session, Please login again'})
    nonce_from_the_client = request.POST["paymentMethodNonce"]
    amount_from_the_client = request. POST["amount"]
    result = gateway.transaction.sale({
        "amount": amount_from_the_client,
        "payment_method_nonce": nonce_from_the_client,  #nonce is a string generated by the client-side Braintree JavaScript SDK to represent payment information securely.
        "options":{
            "submit_for_settlement": True
        }
    })
    if result.is_success:
        return JsonResponse({
            "success": result.is_success, 'transaction':{'id':result.transaction.id,'amount':result.transaction.amount}
        })
    else:
        return JsonResponse({'error':True,'success':False})
    


class PaymentAPIView(APIView):
    def get(self,request):
        data={
            'message':'waiting',
            'status':'success',
        }
        return Response(data,status=status.HTTP_200_OK)